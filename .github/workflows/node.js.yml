# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci

  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [20.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASS: BinarPlatinum
      DB_NAME: challange_platinum_binar
      DB_PORT: 5432
      DATABASE_URL: postgres://user:password@localhost:5432/testdb

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci

    - name: Test PostgreSQL Connection
      run: psql postgres://user:password@localhost:5432/testdb -c '\l'
        
    - name: Print Env Variables
      run: |
        echo DB_USER=$DB_USER
        echo DB_PASS=$DB_PASS
        echo DB_HOST=$DB_HOST
        echo DB_PORT=$DB_PORT
        echo DB_NAME=$DB_NAME
      env:
        DB_USER: postgres
        DB_PASS: BinarPlatinum
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: challange_platinum_binar

    - name: Setup Database
      - run: npx sequelize db:create
      - run: npx sequelize db:migrate
      - run: npx sequelize db:seed:all 
      env:
        DB_USER: postgres
        DB_PASS: BinarPlatinum
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: challange_platinum_binar

    - name: Run tests
      run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4
      - name: Upload to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSHHOST }}
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.SSHPORT }}
          source: '.'
          target: ./Binar-Platinum/
      - name: configure database
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSHHOST }}
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.SSHPORT }}
          script: |
            cd Binar-Platinum/
            npm run undodb
            npm run migrate
            npm run seed
      - name: restart pm2 services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSHHOST }}
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.SSHPORT }}
          script: |
            cd Binar-Platinum/
            npm restart
